<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\MOD8_STM32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\MOD8_STM32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Mar 26 20:02:36 2025
<BR><P>
<H3>Maximum Stack Usage =        532 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; mse_init &rArr; mse_init_ext &rArr; calib_read_bytes_zone &rArr; calib_read_zone &rArr; calib_execute_command &rArr; calib_wakeup &rArr; calib_wakeup_i2c &rArr; hal_check_wake &rArr; memcmp
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from stm32f1xx_it.o(i.USB_HP_CAN1_TX_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f1xx_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[38]">fputc</a> from usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[3d]">hal_i2c_control</a> from hal_i2c_bitbang.o(i.hal_i2c_control) referenced from mse_hal.o(.data)
 <LI><a href="#[39]">hal_i2c_init</a> from hal_i2c_bitbang.o(i.hal_i2c_init) referenced from mse_hal.o(.data)
 <LI><a href="#[3a]">hal_i2c_post_init</a> from hal_i2c_bitbang.o(i.hal_i2c_post_init) referenced from mse_hal.o(.data)
 <LI><a href="#[3c]">hal_i2c_receive</a> from hal_i2c_bitbang.o(i.hal_i2c_receive) referenced from mse_hal.o(.data)
 <LI><a href="#[3e]">hal_i2c_release</a> from hal_i2c_bitbang.o(i.hal_i2c_release) referenced from mse_hal.o(.data)
 <LI><a href="#[3b]">hal_i2c_send</a> from hal_i2c_bitbang.o(i.hal_i2c_send) referenced from mse_hal.o(.data)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[47]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[aa]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_bytes_zone
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_zone
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[88]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_wake
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[40]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[48]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iowake
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioidle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup_i2c
</UL>

<P><STRONG><a name="[49]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[63]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4a]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[4d]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[4f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[4e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IsBigEndian</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.IsBigEndian))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsBigEndian &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>LL_GPIO_Init</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32f1xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[54]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[65]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[59]"></a>LL_USART_Init</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32f1xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[5c]"></a>MX_GPIO_Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[57]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[58]"></a>RCC_GetPCLK2ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(i.RCC_GetPCLK2ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[55]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[62]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f1xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SystemClock_Config</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemClock_Config &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USB_HP_CAN1_TX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b5]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[53]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBigEndian
</UL>

<P><STRONG><a name="[b6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6c]"></a>bpCRC</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, calib_command.o(i.bpCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bpCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpCheckCrc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpCalcCrc
</UL>

<P><STRONG><a name="[6b]"></a>bpCalcCrc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, calib_command.o(i.bpCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bpCalcCrc &rArr; bpCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpRead
</UL>

<P><STRONG><a name="[6d]"></a>bpCheckCrc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, calib_command.o(i.bpCheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bpCheckCrc &rArr; bpCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
</UL>

<P><STRONG><a name="[6e]"></a>bpRead</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, calib_command.o(i.bpRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bpRead &rArr; bpCalcCrc &rArr; bpCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_zone
</UL>

<P><STRONG><a name="[6f]"></a>calib_execute_command</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, calib_execution.o(i.calib_execute_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = calib_execute_command &rArr; calib_wakeup &rArr; calib_wakeup_i2c &rArr; hal_check_wake &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_iface_get_retries
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_get_device_address
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_send
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_receive
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isMSEError
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpCheckCrc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_idle
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_zone
</UL>

<P><STRONG><a name="[74]"></a>calib_execute_receive</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, calib_execution.o(i.calib_execute_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = calib_execute_receive &rArr; ioreceive
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_iface_is_kit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioreceive
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iocontrol
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
</UL>

<P><STRONG><a name="[73]"></a>calib_execute_send</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, calib_execution.o(i.calib_execute_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = calib_execute_send &rArr; iosend
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_iface_is_kit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iosend
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iocontrol
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
</UL>

<P><STRONG><a name="[7c]"></a>calib_get_addr</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, calib_basic.o(i.calib_get_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calib_get_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_zone
</UL>

<P><STRONG><a name="[7d]"></a>calib_get_zone_size</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, calib_basic.o(i.calib_get_zone_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calib_get_zone_size
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_bytes_zone
</UL>

<P><STRONG><a name="[76]"></a>calib_idle</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, calib_basic.o(i.calib_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = calib_idle &rArr; ioidle &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_iface_is_swi
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_iface_is_kit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iosend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioidle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_get_device_address
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
</UL>

<P><STRONG><a name="[80]"></a>calib_read_bytes_zone</STRONG> (Thumb, 310 bytes, Stack size 112 bytes, calib_read.o(i.calib_read_bytes_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = calib_read_bytes_zone &rArr; calib_read_zone &rArr; calib_execute_command &rArr; calib_wakeup &rArr; calib_wakeup_i2c &rArr; hal_check_wake &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_trace
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_zone
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_get_zone_size
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_init_ext
</UL>

<P><STRONG><a name="[81]"></a>calib_read_zone</STRONG> (Thumb, 186 bytes, Stack size 248 bytes, calib_read.o(i.calib_read_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = calib_read_zone &rArr; calib_execute_command &rArr; calib_wakeup &rArr; calib_wakeup_i2c &rArr; hal_check_wake &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_trace
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_get_device_type_ext
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpRead
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_get_addr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_bytes_zone
</UL>

<P><STRONG><a name="[72]"></a>calib_wakeup</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, calib_basic.o(i.calib_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = calib_wakeup &rArr; calib_wakeup_i2c &rArr; hal_check_wake &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_iface_is_swi
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_iface_is_kit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iowake
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioGetIFace
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
</UL>

<P><STRONG><a name="[86]"></a>calib_wakeup_i2c</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, calib_basic.o(i.calib_wakeup_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = calib_wakeup_i2c &rArr; hal_check_wake &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_iface_get_retries
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iosend
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioreceive
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iocontrol
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioGetIFace
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_get_device_address
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_check_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup
</UL>

<P><STRONG><a name="[38]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[87]"></a>hal_check_wake</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mse_hal.o(i.hal_check_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hal_check_wake &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup_i2c
</UL>

<P><STRONG><a name="[98]"></a>hal_delay_us</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, i2c_bitbang_stm32.o(i.hal_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_one_byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
</UL>

<P><STRONG><a name="[3d]"></a>hal_i2c_control</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_i2c_bitbang.o(i.hal_i2c_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_i2c_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mse_hal.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>hal_i2c_init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, hal_i2c_bitbang.o(i.hal_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_i2c_init &rArr; i2c_enable &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_pin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mse_hal.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>hal_i2c_post_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_i2c_bitbang.o(i.hal_i2c_post_init))
<BR>[Address Reference Count : 1]<UL><LI> mse_hal.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>hal_i2c_receive</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, hal_i2c_bitbang.o(i.hal_i2c_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hal_i2c_receive &rArr; i2c_receive_bytes &rArr; i2c_receive_one_byte &rArr; i2c_send_ack &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iogetifacecfg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_pin
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_bytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_send_slave_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mse_hal.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>hal_i2c_release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hal_i2c_bitbang.o(i.hal_i2c_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_i2c_release
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mse_hal.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>hal_i2c_send</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, hal_i2c_bitbang.o(i.hal_i2c_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_i2c_send &rArr; i2c_send_bytes &rArr; i2c_send_byte &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iogetifacecfg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_pin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_stop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_send_slave_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mse_hal.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>hal_iface_init</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, mse_hal.o(i.hal_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_iface_init &rArr; hal_iface_get_registered
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_iface_get_registered
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioinit
</UL>

<P><STRONG><a name="[94]"></a>hal_iface_release</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mse_hal.o(i.hal_iface_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_iface_release &rArr; hal_iface_get_registered
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_iface_get_registered
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;releaseMSEIface
</UL>

<P><STRONG><a name="[8a]"></a>i2c_enable</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, i2c_bitbang_stm32.o(i.i2c_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_enable &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init
</UL>

<P><STRONG><a name="[8d]"></a>i2c_receive_bytes</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, i2c_bitbang_stm32.o(i.i2c_receive_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2c_receive_bytes &rArr; i2c_receive_one_byte &rArr; i2c_send_ack &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_one_byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_receive
</UL>

<P><STRONG><a name="[97]"></a>i2c_receive_one_byte</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, i2c_bitbang_stm32.o(i.i2c_receive_one_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_receive_one_byte &rArr; i2c_send_ack &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_delay_us
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_bytes
</UL>

<P><STRONG><a name="[9b]"></a>i2c_send_ack</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, i2c_bitbang_stm32.o(i.i2c_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_send_ack &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_delay_us
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_one_byte
</UL>

<P><STRONG><a name="[91]"></a>i2c_send_byte</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, i2c_bitbang_stm32.o(i.i2c_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_send_byte &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_delay_us
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_send_slave_address
</UL>

<P><STRONG><a name="[8e]"></a>i2c_send_bytes</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, i2c_bitbang_stm32.o(i.i2c_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_send_bytes &rArr; i2c_send_byte &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_send
</UL>

<P><STRONG><a name="[90]"></a>i2c_send_start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, i2c_bitbang_stm32.o(i.i2c_send_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_send_start &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_delay_us
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_send_slave_address
</UL>

<P><STRONG><a name="[8f]"></a>i2c_send_stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, i2c_bitbang_stm32.o(i.i2c_send_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_send_stop &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_delay_us
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_send
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_bytes
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_send_slave_address
</UL>

<P><STRONG><a name="[89]"></a>i2c_set_pin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_bitbang_stm32.o(i.i2c_set_pin))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_send
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_release
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_receive
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init
</UL>

<P><STRONG><a name="[9c]"></a>initMSEDevice</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mse_device.o(i.initMSEDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = initMSEDevice &rArr; initMSEIface &rArr; ioinit &rArr; hal_iface_init &rArr; hal_iface_get_registered
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMSEIface
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_init_ext
</UL>

<P><STRONG><a name="[9d]"></a>initMSEIface</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mse_iface.o(i.initMSEIface))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initMSEIface &rArr; ioinit &rArr; hal_iface_init &rArr; hal_iface_get_registered
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioinit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMSEDevice
</UL>

<P><STRONG><a name="[84]"></a>ioGetIFace</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mse_device.o(i.ioGetIFace))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup_i2c
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup
</UL>

<P><STRONG><a name="[7a]"></a>iocontrol</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mse_iface.o(i.iocontrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iocontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_send
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_receive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup_i2c
</UL>

<P><STRONG><a name="[8b]"></a>iogetifacecfg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mse_iface.o(i.iogetifacecfg))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_send
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_receive
</UL>

<P><STRONG><a name="[7f]"></a>ioidle</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mse_iface.o(i.ioidle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ioidle &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_idle
</UL>

<P><STRONG><a name="[9e]"></a>ioinit</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, mse_iface.o(i.ioinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ioinit &rArr; hal_iface_init &rArr; hal_iface_get_registered
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_iface_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMSEIface
</UL>

<P><STRONG><a name="[79]"></a>ioreceive</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mse_iface.o(i.ioreceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ioreceive
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_receive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup_i2c
</UL>

<P><STRONG><a name="[7b]"></a>iosend</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mse_iface.o(i.iosend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iosend
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_send
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup_i2c
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_idle
</UL>

<P><STRONG><a name="[85]"></a>iowake</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mse_iface.o(i.iowake))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iowake &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup
</UL>

<P><STRONG><a name="[75]"></a>isMSEError</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, calib_command.o(i.isMSEError))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = main &rArr; mse_init &rArr; mse_init_ext &rArr; calib_read_bytes_zone &rArr; calib_read_zone &rArr; calib_execute_command &rArr; calib_wakeup &rArr; calib_wakeup_i2c &rArr; hal_check_wake &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBigEndian
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[70]"></a>mse_get_device_address</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mse_basic.o(i.mse_get_device_address))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup_i2c
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_idle
</UL>

<P><STRONG><a name="[83]"></a>mse_get_device_type_ext</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mse_basic.o(i.mse_get_device_type_ext))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_zone
</UL>

<P><STRONG><a name="[71]"></a>mse_iface_get_retries</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mse_iface.o(i.mse_iface_get_retries))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_command
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup_i2c
</UL>

<P><STRONG><a name="[78]"></a>mse_iface_is_kit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mse_iface.o(i.mse_iface_is_kit))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_send
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_receive
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_idle
</UL>

<P><STRONG><a name="[7e]"></a>mse_iface_is_swi</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mse_iface.o(i.mse_iface_is_swi))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_wakeup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_idle
</UL>

<P><STRONG><a name="[9f]"></a>mse_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mse_basic.o(i.mse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = mse_init &rArr; mse_init_ext &rArr; calib_read_bytes_zone &rArr; calib_read_zone &rArr; calib_execute_command &rArr; calib_wakeup &rArr; calib_wakeup_i2c &rArr; hal_check_wake &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_init_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>mse_init_ext</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, mse_basic.o(i.mse_init_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = mse_init_ext &rArr; calib_read_bytes_zone &rArr; calib_read_zone &rArr; calib_execute_command &rArr; calib_wakeup &rArr; calib_wakeup_i2c &rArr; hal_check_wake &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_bytes_zone
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMSEDevice
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_release_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_init
</UL>

<P><STRONG><a name="[a1]"></a>mse_release_ext</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mse_basic.o(i.mse_release_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mse_release_ext &rArr; releaseMSEDevice &rArr; releaseMSEIface &rArr; hal_iface_release &rArr; hal_iface_get_registered
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;releaseMSEDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_init_ext
</UL>

<P><STRONG><a name="[77]"></a>mse_trace</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mse_debug.o(i.mse_trace))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_bytes_zone
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioinit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMSEIface
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_read_zone
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_send
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_execute_receive
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_get_zone_size
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_get_addr
</UL>

<P><STRONG><a name="[a2]"></a>releaseMSEDevice</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mse_device.o(i.releaseMSEDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = releaseMSEDevice &rArr; releaseMSEIface &rArr; hal_iface_release &rArr; hal_iface_get_registered
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;releaseMSEIface
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mse_release_ext
</UL>

<P><STRONG><a name="[a3]"></a>releaseMSEIface</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mse_iface.o(i.releaseMSEIface))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = releaseMSEIface &rArr; hal_iface_release &rArr; hal_iface_get_registered
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_iface_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;releaseMSEDevice
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5e]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[50]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[51]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[5a]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_ll_usart.o(i.LL_USART_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[5b]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f1xx_ll_usart.o(i.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[93]"></a>hal_iface_get_registered</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mse_hal.o(i.hal_iface_get_registered))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_iface_get_registered
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_iface_release
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_iface_init
</UL>

<P><STRONG><a name="[61]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[8c]"></a>hal_i2c_send_slave_address</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hal_i2c_bitbang.o(i.hal_i2c_send_slave_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_i2c_send_slave_address &rArr; i2c_send_byte &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_send
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_receive
</UL>

<P><STRONG><a name="[99]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c_bitbang_stm32.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_one_byte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
</UL>

<P><STRONG><a name="[9a]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_bitbang_stm32.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_one_byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
</UL>

<P><STRONG><a name="[96]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_bitbang_stm32.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_one_byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
</UL>

<P><STRONG><a name="[95]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, i2c_bitbang_stm32.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_one_byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_stop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
</UL>

<P><STRONG><a name="[68]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[6a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[69]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
