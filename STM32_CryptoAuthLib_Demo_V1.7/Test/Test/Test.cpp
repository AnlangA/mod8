// Test.cpp: 定义应用程序的入口点。
//

#include "Test.h"
#include "crypto/mse_crypto_sw.h"
#include "mse_status.h"
#include "crypto/mse_crypto_sw_sha2.h"
#include <string.h>


using namespace std;

//const uint8_t Msg[128] = {
//    0x60, 0xcd, 0x64, 0xb2, 0xcd, 0x2b, 0xe6, 0xc3, 0x38, 0x59, 0xb9, 0x48, 0x75, 0x12, 0x03, 0x61, 0xa2, 0x40, 0x85,
//    0xf3, 0x76, 0x5c, 0xb8, 0xb2, 0xbf, 0x11, 0xe0, 0x26, 0xfa, 0x9d, 0x88, 0x55, 0xdb, 0xe4, 0x35, 0xac, 0xf7, 0x88,
//    0x2e, 0x84, 0xf3, 0xc7, 0x85, 0x7f, 0x96, 0xe2, 0xba, 0xab, 0x4d, 0x9a, 0xfe, 0x45, 0x88, 0xe4, 0xa8, 0x2e, 0x17,
//    0xa7, 0x88, 0x27, 0xbf, 0xdb, 0x5d, 0xdb, 0xd1, 0xc2, 0x11, 0xfb, 0xc2, 0xe6, 0xd8, 0x84, 0xcd, 0xdd, 0x7c, 0xb9,
//    0xd9, 0x0d, 0x5b, 0xf4, 0xa7, 0x31, 0x1b, 0x83, 0xf3, 0x52, 0x50, 0x80, 0x33, 0x81, 0x2c, 0x77, 0x6a, 0x0e, 0x00,
//    0xc0, 0x03, 0xc7, 0xe0, 0xd6, 0x28, 0xe5, 0x07, 0x36, 0xc7, 0x51, 0x2d, 0xf0, 0xac, 0xfa, 0x9f, 0x23, 0x20, 0xbd,
//    0x10, 0x22, 0x29, 0xf4, 0x64, 0x95, 0xae, 0x6d, 0x08, 0x57, 0xcc, 0x45, 0x2a, 0x84,
//};
//const uint8_t Qx[32] = {
//    0x2d, 0x98, 0xea, 0x01, 0xf7, 0x54, 0xd3, 0x4b, 0xbc, 0x30, 0x03, 0xdf, 0x50, 0x50, 0x20, 0x0a,
//    0xbf, 0x44, 0x5e, 0xc7, 0x28, 0x55, 0x6d, 0x7e, 0xd7, 0xd5, 0xc5, 0x4c, 0x55, 0x55, 0x2b, 0x6d,
//};
//const uint8_t Qy[32] = {
//    0x9b, 0x52, 0x67, 0x27, 0x42, 0xd6, 0x37, 0xa3, 0x2a, 0xdd, 0x05, 0x6d, 0xfd, 0x6d, 0x87, 0x92,
//    0xf2, 0xa3, 0x3c, 0x2e, 0x69, 0xda, 0xfa, 0xbe, 0xa0, 0x9b, 0x96, 0x0b, 0xc6, 0x1e, 0x23, 0x0a,
//};
//const uint8_t R[32] = {
//    0x06, 0x10, 0x8e, 0x52, 0x5f, 0x84, 0x5d, 0x01, 0x55, 0xbf, 0x60, 0x19, 0x32, 0x22, 0xb3, 0x21,
//    0x9c, 0x98, 0xe3, 0xd4, 0x94, 0x24, 0xc2, 0xfb, 0x2a, 0x09, 0x87, 0xf8, 0x25, 0xc1, 0x79, 0x59,
//};
//const uint8_t S[32] = {
//    0x62, 0xb5, 0xcd, 0xd5, 0x91, 0xe5, 0xb5, 0x07, 0xe5, 0x60, 0x16, 0x7b, 0xa8, 0xf6, 0xf7, 0xcd,
//    0xa7, 0x46, 0x73, 0xeb, 0x31, 0x56, 0x80, 0xcb, 0x89, 0xcc, 0xbc, 0x4e, 0xec, 0x47, 0x7d, 0xce,
//};

const uint8_t Msg[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00,
                       0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00};
const uint8_t Qx[32] = {
    0x2B, 0x41, 0x6E, 0x2D, 0x86, 0xDC, 0xA7, 0xB8, 0x4B, 0xD3, 0x04, 0xD0, 0x87, 0xBC, 0xF4, 0xF1,
    0xD0, 0xCC, 0x21, 0xBC, 0xB7, 0xC0, 0xB0, 0x98, 0x47, 0xA0, 0x40, 0x77, 0xE7, 0x7C, 0x99, 0xF0
};
const uint8_t Qy[32] = {0x6C, 0x32, 0xD3, 0xF7, 0x75, 0x2E, 0x51, 0x45, 0xFA, 0x87, 0x71, 0xD8, 0x86, 0xD6, 0xA3, 0x28,
                        0xED, 0x9D, 0x94, 0x07, 0xCF, 0x58, 0x12, 0x51, 0x16, 0x08, 0x85, 0xB1, 0x0C, 0x4D, 0xC5, 0x96};
const uint8_t R[32] = {0x6B, 0xD4, 0xDF, 0xEF, 0xCB, 0xCF, 0xBA, 0xE4, 0xA6, 0x24, 0x08, 0xE0, 0x70, 0xB6, 0xEE, 0xEC,
                       0x87, 0xAF, 0x34, 0x73, 0xE6, 0xE4, 0x48, 0xCC, 0xA4, 0x0E, 0x99, 0x7E, 0x19, 0x3B, 0x53, 0x63};
const uint8_t S[32] = {0x33, 0x43, 0x55, 0x12, 0x39, 0xFA, 0xBE, 0x75, 0x90, 0x3F, 0xA9, 0xD1, 0x9D, 0x15, 0x51, 0xC6,
                       0x57, 0xA5, 0x57, 0x9B, 0x56, 0xFB, 0xC3, 0xF2, 0xD1, 0x67, 0x1A, 0x0F, 0x77, 0xBB, 0x17, 0x15};

int main()
{
    uint8_t pubkey[64];
    uint8_t signature[64];
    uint8_t digest[32];
    cout << "MOD8 Test." << endl;
    mcac_pk_ctx pkey_ctx;
    MSE_STATUS status;
    int istatus;

    /* Copy pubkey */
    memcpy(pubkey, Qx, 32);
    memcpy(&pubkey[32], Qy, 32);

    /* Copy the signature */
    memcpy(signature, R, 32);
    memcpy(&signature[32], S, 32);

    /* Hash the message */
    istatus = mcac_sw_sha2_256(Msg, sizeof(Msg), digest);
    if (MSE_SUCCESS != istatus)
    {
        cout << "mcac_sw_sha2_256() failed: " << istatus << endl;
        return -1;
    }

    /* Initialize the key using the provided X,Y cordinantes */
    status = mcac_pk_init(&pkey_ctx, pubkey, sizeof(pubkey), 0, true);
    if (MSE_SUCCESS != status)
    {
        cout << "mcac_pk_init() failed: "<<  status << endl;
    }
    else
    {
        /* Perform the verification */
        status = mcac_pk_verify(&pkey_ctx, digest, sizeof(digest), signature, sizeof(signature));
    }

    /* Make sure to free the key before testing the result of the verify */
    mcac_pk_free(&pkey_ctx);

    if (MSE_SUCCESS != status)
    {
        cout << "ECC verify failed: "<< status << endl;
        return -1;
    }

    cout << "ECC Verify Pass. " << endl;

    return 0;
}